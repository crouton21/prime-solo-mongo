// 1. Create a collection named orders
db.createCollection('orders')

// 2. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields. Order dates should be: 2017-02-03, 2017-04-04, 2017-01-02
db.getCollection('orders').insert({
 orderDate: new Date(2017-02-03),
 orderTotal: 150,
 lineItems: [
 {unitPrice: 50,
 quantity: 2,
 productName: 'dog food'},
 {unitPrice: 25,
 quantity: 2,
 productName: 'cat food'}]})
 
 db.getCollection('orders').insert({
 orderDate: new Date(2017-04-04),
 orderTotal: 70,
 lineItems: [
 {unitPrice: 10,
 quantity: 2,
 productName: 'tea'},
 {unitPrice: 10,
 quantity: 5,
 productName: 'coffee'}]})

db.getCollection('orders').insert({
 orderDate: new Date(2017-01-02),
 orderTotal: 2000,
 lineItems: [
 {unitPrice: 600,
 quantity: 2,
 productName: 'iPhone'},
 {unitPrice: 400,
 quantity: 1,
 productName: 'Android Phone'},
 {unitPrice: 20,
 quantity: 20,
 productName: 'flip phones'}]})
 
// 3. Find all orders and make them look pretty.
db.getCollection('orders').find().pretty()

// 4. Find all orders with an orderDate that is after 1/31/2017.
db.getCollection('orders').find({orderDate:{$gt:ISODate('2017-01-31')}})

// 5. Change the orderTotal from 2/3/2017 to 63 dollars (you do NOT have to ensure the lineItems' unitPrice * quantity add up to the orderTotal)
db.getCollection('orders').update({orderDate: ISODate('2017-02-03T00:00:02.012Z')},{$set:{orderTotal:63}})

// 6. Add another lineItem to the order from 4/4/2017
db.getCollection('orders').update({orderDate: ISODate('2017-04-04T00:00:02.009Z')},{$push:{lineItems:{unitPrice:2, quantity:2, productName: 'notebook'}}})

// 7. Change the first lineItem in the order from 1/2/2017 to be for 2 'transistor radio's
db.getCollection('orders').update(
{orderDate: ISODate('2017-01-02T00:00:02.014Z')},
{$set:{'lineItems.0.productName':'transistor radio'}})

db.getCollection('orders').update(
{orderDate: ISODate('2017-01-02T00:00:02.014Z')},
{$set:{'lineItems.0.unitPrice':20}})

// 8. Find orders with lineItems that have a quantity that is less than 10, but greater than 2. You will have to research $elemMatch
db.getCollection('orders').find(
{lineItems: { $elemMatch:{ quantity:{$gt: 2,  $lt: 10}}}})
